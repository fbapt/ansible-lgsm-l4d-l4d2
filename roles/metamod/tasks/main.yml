---
- name: Get filename of latest version of Metamod Source
  ansible.builtin.uri:
    url: "{{ metamod_url }}/{{ metamod_branch }}/mmsource-latest-linux"
    return_content: true
  register: metamod_source_filename
  changed_when: false

- name: Check the currently installed version of Metamod Source
  ansible.builtin.command:
    cmd: grep -qF {{ metamod_source_filename.content }} /home/{{ item.user }}/serverfiles/{{ item.directory }}/addons/metamod/VERSION
  register: metamod_source_current
  loop: "{{ lgsm }}"
  loop_control:
    label: "cmd: grep -qF {{ metamod_source_filename.content | default() }} /home/{{ item.user }}/serverfiles/{{ item.directory }}/addons/metamod/VERSION"
  changed_when: false
  failed_when: false
  when: not ansible_check_mode

- name: Block Metamod Source installation
  when: not ansible_check_mode and item.1.rc != 0
  block:
    - name: Download the latest version
      ansible.builtin.get_url:
        url: "{{ metamod_url }}/{{ metamod_branch }}/{{ metamod_source_filename.content }}"
        dest: "/home/{{ item.0.user }}"
        mode: "0755"
        owner: "{{ item.0.user }}"
        group: "{{ item.0.user }}"
      loop: "{{ lgsm | zip(metamod_source_current.results) | list }}"
      loop_control:
        label: "url: {{ metamod_url }}/{{ metamod_branch }}/{{ metamod_source_filename.content | default() }} dest: /home/{{ item.0.user }}"

    - name: Extract the downloaded file
      ansible.builtin.unarchive:
        remote_src: true
        src: "/home/{{ item.0.user }}/{{ metamod_source_filename.content }}"
        dest: "/home/{{ item.0.user }}/serverfiles/{{ item.0.directory }}"
        owner: "{{ item.0.user }}"
        group: "{{ item.0.user }}"
        mode: "0755"
      loop: "{{ lgsm | zip(metamod_source_current.results) | list }}"
      loop_control:
        label: "src: /home/{{ item.0.user }}/{{ metamod_source_filename.content | default() }} dest /home/{{ item.0.user }}/serverfiles/{{ item.0.directory }}"

    - name: Remove the archive
      ansible.builtin.file:
        path: "/home/{{ item.0.user }}/{{ metamod_source_filename.content }}"
        state: absent
      loop: "{{ lgsm | zip(metamod_source_current.results) | list }}"
      loop_control:
        label: "path: /home/{{ item.0.user }}/{{ metamod_source_filename.content | default() }}"

    - name: Write the current metamod source version
      ansible.builtin.copy:
        dest: "/home/{{ item.0.user }}/serverfiles/{{ item.0.directory }}/addons/metamod/VERSION"
        content: "{{ metamod_source_filename.content }}"
        owner: "{{ item.0.user }}"
        group: "{{ item.0.user }}"
        mode: "0644"
      loop: "{{ lgsm | zip(metamod_source_current.results) | list }}"
      loop_control:
        label: "dest: /home/{{ item.0.user }}/serverfiles/{{ item.0.directory }}/addons/metamod/VERSION"

- name: Remove metamod_x64.vdf
  ansible.builtin.file:
    path: "/home/{{ item.user }}/serverfiles/{{ item.directory }}/addons/metamod_x64.vdf"
    state: absent
  when: not ansible_check_mode
  loop: "{{ lgsm }}"
  loop_control:
    label: "path: /home/{{ item.user }}/serverfiles/{{ item.directory }}/addons/metamod_x64.vdf"

- name: Create metamod.vdf
  ansible.builtin.template:
    src: metamod.vdf.j2
    dest: "/home/{{ item.user }}/serverfiles/{{ item.directory }}/addons/metamod.vdf"
    owner: "{{ item.user }}"
    group: "{{ item.user }}"
    mode: "0644"
  loop: "{{ lgsm }}"
  loop_control:
    label: "dest: /home/{{ item.user }}/serverfiles/{{ item.directory }}/addons/metamod.vdf"

- name: Include tasks copy metamod plugins files
  ansible.builtin.import_tasks: metamod_plugins.yml
