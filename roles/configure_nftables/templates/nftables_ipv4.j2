# Table filter pour gérer l'IPv4 uniquement
table ip filter {

    # Set dynamique pour suivre les IPs "récentes" dans le cas d'une limitation de connexion (flood)
    # Ce set stocke les adresses IPv4 et applique une expiration après 60 secondes.
    set recent_udp_flood {
        type ipv4_addr
        flags dynamic, timeout
        timeout 60s
    }

    chain INPUT {
        # Hook d'entrée avec une politique par défaut de rejet
        type filter hook input priority filter; policy drop;

        # Accepter le trafic venant de l'interface loopback (localhost)
        iifname "lo" accept

        # Accepter les paquets qui font partie d'une connexion établie ou déjà autorisée
        ct state established accept

        # Protection SSH : limiter le nombre de tentatives sur le port SSH
        tcp dport {{ configure_nftables_ssh_port }} ct state new \
            meter SSHPROTECT { tcp dport limit rate 2/second burst 2 packets } counter accept

        # Limitation des connexions UDP par IP (10 connexions par minute) vers les ports de jeu
        # 1ère règle : Si une IP dépasse la limite, elle est bloquée
        udp dport { {{ configure_nftables_games_servers_ports }} } ct state new \
            update @recent_udp_flood { ip saddr timeout 60s } limit rate over 10/minute drop

        # 2ème règle : Ajouter l'IP au set dynamique et accepter la connexion (si elle respecte la limite)
        udp dport { {{ configure_nftables_games_servers_ports }} } ct state new \
            add @recent_udp_flood { ip saddr } counter accept

        # Accepter les connexions déjà établies vers les ports de jeu
        udp dport { {{ configure_nftables_games_servers_ports }} } ct state established counter accept

        # Limite du nombre de connexions TCP par seconde pour éviter les attaques par force brute
        meta l4proto tcp ct state new limit rate 20/second burst 20 packets counter accept

        # Rejeter les connexions TCP non autorisées après 20 paquets par seconde
        meta l4proto tcp ct state new counter drop

        # Rejeter les paquets ayant un état de connexion invalides (par exemple, des paquets fragmentés)
        ct state invalid counter drop

        # Protection contre les attaques de type RST sur TCP (limiter à 2 paquets par seconde)
        tcp flags & rst == rst limit rate 2/second burst 2 packets counter accept
    }

    # Chain pour les paquets transitant dans le chain FORWARD (rejet par défaut)
    chain FORWARD {
        type filter hook forward priority filter; policy drop;
    }

    # Chain pour gérer les paquets sortants (sortie)
    chain OUTPUT {
        type filter hook output priority filter; policy accept;
    }

    # Détection des scans de ports : règles qui analysent les paquets TCP pour repérer des scans
    chain port-scanning {
        # Scans avec des paquets RST/SYN combinés
        tcp flags rst / fin,syn,rst,ack limit rate 1/second burst 2 packets counter return
        counter drop
    }
}

# Table pour modifier certains paquets (Mangle)
table ip mangle {
    chain PREROUTING {
        type filter hook prerouting priority mangle; policy accept;

        # Rejeter les paquets invalides
        ct state invalid counter drop

        # Rejeter les paquets avec des flags TCP malformés (par exemple, SYN+FIN en même temps)
        tcp flags fin,syn / fin,syn counter drop
        tcp flags syn,rst / syn,rst counter drop
        tcp flags fin / fin,ack counter drop

        # Limiter le nombre de paquets ICMP à 3 par seconde pour éviter les floods ICMP
        ip protocol icmp limit rate 3/second counter accept

        # Rejeter les paquets IP fragmentés mal formés
        ip frag-off & 8191 != 0 counter drop
    }

    # Chain pour les paquets sortants
    chain OUTPUT {
        type route hook output priority mangle; policy accept;
    }
}

# Table raw pour un traitement minimal des paquets avant que l'état de connexion ne soit établi
table ip raw {
    chain PREROUTING {
        type filter hook prerouting priority raw; policy accept;

        # Accepter tout le trafic UDP vers les ports de jeu (sans vérification de connexion)
        udp dport { {{ configure_nftables_games_servers_ports }} } counter accept
    }

    # Chain pour les paquets sortants
    chain OUTPUT {
        type filter hook output priority raw; policy accept;
    }
}
